{"version":3,"sources":["store/index.ts","api/api.ts","api/post.ts","store/selectors.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["ActionType","BASE_URL","getPosts","a","fetch","response","json","getUserPosts","userId","getPostDetails","postId","deletePost","method","setPosts","createAction","SET_POSTS","setUsers","SET_USERS","setSelectedPostId","SET_POST_ID","setSelectedPost","SET_POST","setPostComments","SET_POST_COMMENTS","reducer","createReducer","posts","users","selectedPostId","selectedPost","postComments","builder","addCase","state","action","payload","store","configureStore","getPostsSelector","getUsersSelector","getSelectedPostIdSelector","getSelectedPost","getPostCommentsSelector","PostsList","onRequestPosts","dispatch","useDispatch","useSelector","selectPostId","className","map","post","title","id","type","onClick","style","backgroundColor","getPostComments","deleteComment","commentId","addComment","comment","headers","body","JSON","stringify","NewCommentForm","onRequest","useState","name","setName","email","setEmail","setBody","handleSubmit","event","preventDefault","newComment","onSubmit","placeholder","value","onChange","target","required","PostDetails","comments","showComments","setShowComments","requestPost","postFromServer","console","log","requestComments","commentsFromServer","useEffect","length","cn","hidden","getUsers","App","requestPosts","postsFromServer","requestUsers","usersFromServer","slice","handleSelect","userPost","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1480815d.chunk.js","sourcesContent":["// eslint-disable-next-line max-len\nimport { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\n\nenum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_POST_ID = 'SET_POST_ID',\n  SET_POST = 'SET_POST',\n  SET_POST_COMMENTS = 'SET_POST_COMMENTS',\n}\n\nconst initialState: State = {\n  posts: [],\n  users: [],\n  selectedPostId: 0,\n  selectedPost: null,\n  postComments: [],\n};\n\nexport const setPosts = createAction<Post[]>(ActionType.SET_POSTS);\nexport const setUsers = createAction<User[]>(ActionType.SET_USERS);\nexport const setSelectedPostId = createAction<number>(ActionType.SET_POST_ID);\nexport const setSelectedPost = createAction<Post | null>(ActionType.SET_POST);\n// eslint-disable-next-line max-len\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const setPostComments = createAction<any>(ActionType.SET_POST_COMMENTS);\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(setPosts, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.posts = action.payload;\n    })\n    .addCase(setUsers, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.users = action.payload;\n    })\n    .addCase(setSelectedPostId, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.selectedPostId = action.payload;\n    })\n    .addCase(setSelectedPost, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.selectedPost = action.payload;\n    })\n    .addCase(setPostComments, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.postComments = action.payload;\n    });\n});\n\nexport const store = configureStore({\n  reducer,\n});\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: number) => {\n  await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getUsersSelector = (state: State) => state.users;\nexport const getSelectedPostIdSelector = (state: State) => state.selectedPostId;\nexport const getSelectedPost = (state: State) => state.selectedPost;\nexport const getPostCommentsSelector = (state: State) => state.postComments;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost } from '../../api/post';\nimport { setSelectedPostId } from '../../store';\nimport { getSelectedPostIdSelector } from '../../store/selectors';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  onRequestPosts: () => void\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onRequestPosts }) => {\n  const dispatch = useDispatch();\n\n  const selectedPostId = useSelector(getSelectedPostIdSelector);\n\n  const selectPostId = (postId: number) => {\n    dispatch(setSelectedPostId(postId));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            <div>\n              {post.id !== selectedPostId\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      selectPostId(post.id);\n                    }}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      selectPostId(0);\n                    }}\n                    style={{ backgroundColor: 'red' }}\n                  >\n                    Close\n                  </button>\n                )}\n              <button\n                type=\"button\"\n                className=\"button-close\"\n                onClick={async () => {\n                  await deletePost(post.id);\n                  onRequestPosts();\n                }}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async (comment: NewComment) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  post: Post,\n  onRequest: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  onRequest,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: post.id,\n      name,\n      email,\n      body,\n    };\n\n    await addComment(newComment);\n    onRequest();\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import cn from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/post';\nimport { setPostComments, setSelectedPost } from '../../store';\n// eslint-disable-next-line max-len\nimport { getPostCommentsSelector, getSelectedPost, getSelectedPostIdSelector } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const selectedPostId = useSelector(getSelectedPostIdSelector);\n  const post = useSelector(getSelectedPost);\n\n  const comments = useSelector(getPostCommentsSelector);\n\n  const [showComments, setShowComments] = useState(true);\n\n  const requestPost = async () => {\n    try {\n      const postFromServer = await getPostDetails(selectedPostId);\n\n      dispatch(setSelectedPost(postFromServer));\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('Error');\n    }\n  };\n\n  const requestComments = async () => {\n    try {\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      dispatch(setPostComments(commentsFromServer));\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('Error');\n    }\n  };\n\n  useEffect(() => {\n    requestPost();\n    requestComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length === 0 && 'No comments'}\n        <div className={cn({ hidden: comments.length === 0 })}>\n          {!showComments\n            ? (\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setShowComments(true);\n                }}\n              >\n                {`Show ${comments.length} comments`}\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setShowComments(false);\n                }}\n              >\n                {`Hide ${comments.length} comments`}\n              </button>\n            )}\n        </div>\n\n        {showComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async () => {\n                    await deleteComment(comment.id);\n                    await requestComments();\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm\n              post={post}\n              onRequest={requestComments}\n            />\n\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/post';\nimport { getUsers } from './api/users';\n// eslint-disable-next-line max-len\nimport { getPostsSelector, getSelectedPostIdSelector, getUsersSelector } from './store/selectors';\nimport { setPosts, setUsers } from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const posts = useSelector(getPostsSelector);\n  const users = useSelector(getUsersSelector);\n\n  const selectedPostId = useSelector(getSelectedPostIdSelector);\n\n  const requestPosts = async () => {\n    try {\n      const postsFromServer = await getPosts();\n\n      dispatch(setPosts(postsFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const requestUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      dispatch(setUsers(usersFromServer.slice(0, 9)));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    requestUsers();\n    requestPosts();\n  }, []);\n\n  const handleSelect = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const userPost = await getUserPosts(+event.target.value);\n\n    dispatch(setPosts(userPost));\n\n    if (+event.target.value === 0) {\n      requestPosts();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onRequestPosts={requestPosts}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}